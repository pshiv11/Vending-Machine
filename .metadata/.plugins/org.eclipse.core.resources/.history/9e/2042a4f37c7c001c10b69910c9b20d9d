package vendingmachine.dao;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import vendingmachine.dto.Item;

public class VendingMachineDaoFileImpl implements VendingMachineDao {
	
	private static String INVENTORY;
	private static final String DELIMETER = "::";
	private Map<Integer, Item> items = new HashMap<>();
	

	@Override
	public Item additem(int id, Item item) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Item removeItem(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Item getItem(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Item updateItemInventory(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Item> getAllItems() {
		// TODO Auto-generated method stub
		return null;
	}
	
	private void loadInventory() throws VendingMachineDaoPersistenceException {
		Scanner scan;
		
		try {
			scan = new Scanner(new BufferedReader(new FileReader(INVENTORY)));
		}catch(FileNotFoundException e) {
			throw new VendingMachineDaoPersistenceException ("Could not load inventory", e);
		}
		
		String itemAstext;
		Item itemAsObj;
		while(scan.hasNextLine()) {
			itemAstext = scan.nextLine();
		}
	}
	
	private Item itemFromTextFile(String itemAsText) {
		String [] itemAsTokens = itemAsText.split(DELIMETER);
		Item itemAsObj;
		int id;
		try {
			id = Integer.parseInt(itemAsTokens[0]);
			itemAsObj = new Item(id);
		}catch(NumberFormatException e) {
			System.out.println("Invalid Item id found in the inventory");
		}
		String name = itemAsTokens[1];
		BigDecimal price = new BigDecimal(itemAsTokens[2]);
		
		int quantity;
		try {
			quantity = Integer.parseInt(itemAsTokens[3]);
		}catch(NumberFormatException e) {
			System.out.println("Invalid Item quantity found in the inventory");
		}
		
		itemAsObj = new Item(id, name, price, qualtity);
	}

}
